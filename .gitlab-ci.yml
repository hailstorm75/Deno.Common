variables:
  PROJ_NAME: 'Common'
  PROJ_CORE_NAME: 'CommonCore'
  PROJ_CPP_NAME: 'CommonCpp'
  BUILD_CONF: 'Debug'
  RELEASE_CONF: 'Release'

  UT_PREFIX: 'UnitTestCommon'
  TEST_REPORT: 'TestResults.txt'
  TEST_RUNNER: 'NUnit.ConsoleRunner'

  TEST_RUNNER_W_VER: '${TEST_RUNNER}.3.10.0'

  # Common
  PATH_TO_SOLUTION: '${PROJ_NAME}/${PROJ_NAME}.sln'
  PATH_TO_RELEASE: 'bin/Libraries/${RELEASE_CONF}/'
  PATH_TO_TESTS: 'bin/Tests/${BUILD_CONF}/'
  # CommonCore
  PATH_TO_CORE_SOLUTION: '${PROJ_CORE_NAME}/${PROJ_CORE_NAME}.sln'
  PATH_TO_CORE_RELEASE: 'binCore/Libraries/${RELEASE_CONF}/'
  PATH_TO_CORE_TESTS: 'binCore/Tests/${BUILD_CONF}/'
  # CommonCpp
  PATH_TO_CPP_TESTS: '${PROJ_CPP_NAME}/Tests'

stages:
  - build
  - test
  - release

build_job:
  image: mono:latest
  stage: build
  script:
  - 'nuget restore ${PATH_TO_SOLUTION}'
  - 'MONO_IOMAP=case msbuild /t:Build /p:Configuration=${BUILD_CONF} /p:Platform="Any CPU" ${PATH_TO_SOLUTION}'
  cache:
    key: binaries
    paths:
    - '${PATH_TO_TESTS}'
    policy: push
  except:
  - tags

test_job:
  image: mono:latest
  stage: test
  cache:
    key: binaries
    paths:
    - '${PATH_TO_TESTS}'
    policy: pull
  script:
  - 'apt-get -qq update -y'
  - 'apt-get -qq install unzip'
  - 'nuget install ${TEST_RUNNER}'
  - 'unzip ${TEST_RUNNER_W_VER}/${TEST_RUNNER_W_VER}.nupkg'
  - 'chmod -R 777 tools'

  # Black magic.png
  # 1. Runs testing for each .dll file
  # 2. Removes output header information
  # 3. Removes output run settings information
  # 4. Removes footer
  # 5. Writes to file
  - 'touch ${TEST_REPORT}'
  - for i in $(ls ${PATH_TO_TESTS}*.dll | egrep ^*/${UT_PREFIX}*); do mono tools/nunit3-console.exe $i | awk '/Test Files/'{f=1}f{print} | awk -v regex="Run Settings" -v count="8"  '$0 ~ regex { skip=count; next } --skip >= 0 { next } 1' | head -n -1 >> ${TEST_REPORT}; done
  - cat ${TEST_REPORT}
  artifacts:
    paths:
    - '${TEST_REPORT}'
    expire_in: 1 day
    when: always
  except:
  - tags

release_job:
 image: mono:latest
 stage: release
 script:
  - 'nuget restore ${PATH_TO_SOLUTION}'
  - 'MONO_IOMAP=case msbuild /t:Build /p:Configuration=${RELEASE_CONF} /p:Platform="Any CPU" ${PATH_TO_SOLUTION}'
  - 'rm ${PATH_TO_RELEASE}*.pdb'
 artifacts:
   paths:
   - '${PATH_TO_RELEASE}'
   expire_in: 1 week
 when: manual

build_job_core:
  image: mono:latest
  stage: build
  script:
  - 'nuget restore ${PATH_TO_CORE_SOLUTION}'
  - 'MONO_IOMAP=case msbuild /t:Build /p:Configuration=${BUILD_CONF} /p:Platform="Any CPU" ${PATH_TO_CORE_SOLUTION}'
  except:
  - tags

test_job_core:
  image: microsoft/dotnet
  stage: test
  script:
  - for i in $(ls ${PROJ_CORE_NAME}/Tests/*/${UT_PREFIX}*); do dotnet test $i; done

release_job_core:
 image: mono:latest
 stage: release
 script:
  - 'nuget restore ${PATH_TO_CORE_SOLUTION}'
  - 'MONO_IOMAP=case msbuild /t:Build /p:Configuration=${RELEASE_CONF} /p:Platform="Any CPU" ${PATH_TO_CORE_SOLUTION}'
  - 'rm ${PATH_TO_CORE_RELEASE}*.pdb'
 artifacts:
   paths:
   - '${PATH_TO_CORE_RELEASE}'
   expire_in: 1 week
 when: manual

test_job_cpp:
  image: ubuntu
  stage: test
  script:
  - 'apt-get update'
  - 'apt-get install -y cmake'
  - 'apt-get install -y software-properties-common'
  - 'add-apt-repository ppa:ubuntu-toolchain-r/test'
  - 'apt-get update'
  - 'apt install g++-8 -y'
  - 'update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 60 --slave /usr/bin/g++ g++ /usr/bin/g++-8'
  - 'cd ${PATH_TO_CPP_TESTS}'
  - 'for i in $(ls -d */); do cd $i; cmake .; make; ./$(ls | egrep ^${UT_PREFIX}[A-Z][a-z]*[^\.]$); cd ..; done'
